{"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO13signMagnitudeyA2CmF":{"name":"signMagnitude","abstract":"\u003cp\u003eSigned magnitude representation.\u003c/p\u003e","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO22oneComplementNegativesyA2CmF":{"name":"oneComplementNegatives","abstract":"\u003cp\u003eOne\u0026rsquo;s complement representation of negative integers.\u003c/p\u003e","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO22twoComplementNegativesyA2CmF":{"name":"twoComplementNegatives","abstract":"\u003cp\u003eTwo\u0026rsquo;s complement representation of negative integers.\u003c/p\u003e","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO6biasedyACSi_tcACmF":{"name":"biased(bias:)","abstract":"\u003cp\u003eBiased representation with a custom \u003ccode\u003ebias\u003c/code\u003e.\u003c/p\u003e","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO16radixNegativeTwoyA2CmF":{"name":"radixNegativeTwo","abstract":"\u003cp\u003eBase (radix) -2 representation.\u003c/p\u003e","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO016minRepresentableE09bitsCountS2i_tF":{"name":"minRepresentableNumber(bitsCount:)","abstract":"\u003cp\u003eReturns a minimum signed integer that is possible to represent in a binary format within \u003ccode\u003ebitsCount\u003c/code\u003e bits using the","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO016maxRepresentableE09bitsCountS2i_tF":{"name":"maxRepresentableNumber(bitsCount:)","abstract":"\u003cp\u003eReturns a maximum signed integer that is possible to represent in a binary format within \u003ccode\u003ebitsCount\u003c/code\u003e bits using the","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html":{"name":"SignedNumberRepresentation","abstract":"\u003cp\u003eRepresents a method to encode signed integers in a binary format.\u003c/p\u003e"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterC4data10Foundation0C0Vvp":{"name":"data","abstract":"\u003cp\u003eData which contains the writer\u0026rsquo;s output (the last byte, that is currently being written, is not included).\u003c/p\u003e","parent_name":"MsbBitWriter"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterC9isAlignedSbvp":{"name":"isAligned","abstract":"\u003cp\u003eTrue, if a bit pointer is aligned to a byte boundary.\u003c/p\u003e","parent_name":"MsbBitWriter"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterCACycfc":{"name":"init()","abstract":"\u003cp\u003eCreates an instance for writing bits and bytes.\u003c/p\u003e","parent_name":"MsbBitWriter"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterC5write3bitys5UInt8V_tF":{"name":"write(bit:)","abstract":"\u003cp\u003eWrites a \u003ccode\u003ebit\u003c/code\u003e, advancing by one bit position.\u003c/p\u003e","parent_name":"MsbBitWriter"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterC5write14unsignedNumber9bitsCountySu_SitF":{"name":"write(unsignedNumber:bitsCount:)","abstract":"\u003cp\u003eWrites an unsigned \u003ccode\u003enumber\u003c/code\u003e, advancing by \u003ccode\u003ebitsCount\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"MsbBitWriter"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterC6append4byteys5UInt8V_tF":{"name":"append(byte:)","abstract":"\u003cp\u003eWrites a \u003ccode\u003ebyte\u003c/code\u003e, advancing by one byte position.\u003c/p\u003e","parent_name":"MsbBitWriter"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterC5alignyyF":{"name":"align()","abstract":"\u003cp\u003eAligns a bit pointer to a byte boundary, i.e. moves the bit pointer to the first bit of the next byte, filling all","parent_name":"MsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterC4data10Foundation0C0Vvp":{"name":"data","abstract":"\u003cp\u003eData which contains the writer\u0026rsquo;s output (the last byte, that is currently being written, is not included).\u003c/p\u003e","parent_name":"LsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterC9isAlignedSbvp":{"name":"isAligned","abstract":"\u003cp\u003eTrue, if a bit pointer is aligned to a byte boundary.\u003c/p\u003e","parent_name":"LsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterCACycfc":{"name":"init()","abstract":"\u003cp\u003eCreates an instance for writing bits and bytes.\u003c/p\u003e","parent_name":"LsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterC5write3bitys5UInt8V_tF":{"name":"write(bit:)","abstract":"\u003cp\u003eWrites a \u003ccode\u003ebit\u003c/code\u003e, advancing by one bit position.\u003c/p\u003e","parent_name":"LsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterC5write14unsignedNumber9bitsCountySu_SitF":{"name":"write(unsignedNumber:bitsCount:)","abstract":"\u003cp\u003eWrites an unsigned \u003ccode\u003enumber\u003c/code\u003e, advancing by \u003ccode\u003ebitsCount\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"LsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterC6append4byteys5UInt8V_tF":{"name":"append(byte:)","abstract":"\u003cp\u003eWrites a \u003ccode\u003ebyte\u003c/code\u003e, advancing by one byte position.\u003c/p\u003e","parent_name":"LsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterC5alignyyF":{"name":"align()","abstract":"\u003cp\u003eAligns a bit pointer to a byte boundary, i.e. moves the bit pointer to the first bit of the next byte, filling all","parent_name":"LsbBitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP4data10Foundation0C0Vvp":{"name":"data","abstract":"\u003cp\u003eData which contains the writer\u0026rsquo;s output (the last byte, that is currently being written, is not included).\u003c/p\u003e","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP9isAlignedSbvp":{"name":"isAligned","abstract":"\u003cp\u003eTrue, if a bit pointer is aligned to a byte boundary.\u003c/p\u003e","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterPxycfc":{"name":"init()","abstract":"\u003cp\u003eCreates an instance for writing bits and bytes.\u003c/p\u003e","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP5write3bitys5UInt8V_tF":{"name":"write(bit:)","abstract":"\u003cp\u003eWrites a \u003ccode\u003ebit\u003c/code\u003e, advancing by one bit position.\u003c/p\u003e","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP5write4bitsySays5UInt8VG_tF":{"name":"write(bits:)","abstract":"\u003cp\u003eWrites \u003ccode\u003ebits\u003c/code\u003e, advancing by \u003ccode\u003ebits.count\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP5write6number9bitsCountySi_SitF":{"name":"write(number:bitsCount:)","abstract":"\u003cp\u003eWrites a \u003ccode\u003enumber\u003c/code\u003e into \u003ccode\u003ebitsCount\u003c/code\u003e amount of bits, advancing by \u003ccode\u003ebitsCount\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP5write12signedNumber9bitsCount14representationySi_SiAA06SignedG14RepresentationOtF":{"name":"write(signedNumber:bitsCount:representation:)","abstract":"\u003cp\u003eWrites a signed integer \u003ccode\u003enumber\u003c/code\u003e into \u003ccode\u003ebitsCount\u003c/code\u003e amount of bits, advancing by \u003ccode\u003ebitsCount\u003c/code\u003e bit positions, while","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP5write14unsignedNumber9bitsCountySu_SitF":{"name":"write(unsignedNumber:bitsCount:)","abstract":"\u003cp\u003eWrites an unsigned \u003ccode\u003enumber\u003c/code\u003e, advancing by \u003ccode\u003ebitsCount\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP6append4byteys5UInt8V_tF":{"name":"append(byte:)","abstract":"\u003cp\u003eWrites a \u003ccode\u003ebyte\u003c/code\u003e, advancing by one byte position.\u003c/p\u003e","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP5alignyyF":{"name":"align()","abstract":"\u003cp\u003eAligns a bit pointer to a byte boundary, i.e. moves the bit pointer to the first bit of the next byte, filling all","parent_name":"BitWriter"},"Protocols/BitWriter.html":{"name":"BitWriter","abstract":"\u003cp\u003eA type that contains functions for writing \u003ccode\u003eData\u003c/code\u003e bit-by-bit and byte-by-byte.\u003c/p\u003e"},"Classes/LsbBitWriter.html":{"name":"LsbBitWriter","abstract":"\u003cp\u003eA type that contains functions for writing \u003ccode\u003eData\u003c/code\u003e bit-by-bit and byte-by-byte using \u0026ldquo;LSB 0\u0026rdquo; bit numbering scheme.\u003c/p\u003e"},"Classes/MsbBitWriter.html":{"name":"MsbBitWriter","abstract":"\u003cp\u003eA type that contains functions for writing \u003ccode\u003eData\u003c/code\u003e bit-by-bit and byte-by-byte using \u0026ldquo;MSB 0\u0026rdquo; bit numbering scheme.\u003c/p\u003e"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4sizeSivp":{"name":"size","abstract":"\u003cp\u003eSize of the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e (in bytes).\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4data10Foundation0C0Vvp":{"name":"data","abstract":"\u003cp\u003eData which is being read.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6offsetSivp":{"name":"offset","abstract":"\u003cp\u003eOffset to a byte in the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e which will be read next.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC9isAlignedSbvp":{"name":"isAligned","abstract":"\u003cp\u003eTrue, if a bit pointer is aligned to a byte boundary.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC8bitsLeftSivp":{"name":"bitsLeft","abstract":"\u003cp\u003eAmount of bits left to read.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC8bitsReadSivp":{"name":"bitsRead","abstract":"\u003cp\u003eAmount of bits that were already read.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4dataAC10Foundation0C0V_tcfc":{"name":"init(data:)","abstract":"\u003cp\u003eCreates an instance for reading bits (and bytes) from the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderCyAcA0bE0_pcfc":{"name":"init(_:)","abstract":"\u003cp\u003eConverts a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html\"\u003eByteReader\u003c/a\u003e\u003c/code\u003e instance into a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LsbBitReader.html\"\u003eLsbBitReader\u003c/a\u003e\u003c/code\u003e, enabling bit reading capabilities. The current \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6offsetSivp\"\u003eoffset\u003c/a\u003e\u003c/code\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC7advance2byySi_tF":{"name":"advance(by:)","abstract":"\u003cp\u003eAdvances a bit pointer by the specified amount of bits (the default value is 1).\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC3bits5UInt8VyF":{"name":"bit()","abstract":"\u003cp\u003eReads a bit and returns it, advancing by one bit position.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4bits5countSays5UInt8VGSi_tF":{"name":"bits(count:)","abstract":"\u003cp\u003eReads \u003ccode\u003ecount\u003c/code\u003e bits and returns them as a \u003ccode\u003e[UInt8]\u003c/code\u003e array, advancing by \u003ccode\u003ecount\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC9signedInt8fromBits14representationS2i_AA26SignedNumberRepresentationOtF":{"name":"signedInt(fromBits:representation:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits, treating them as a binary \u003ccode\u003erepresenation\u003c/code\u003e of a signed integer, and returns the result as a","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4byte8fromBitss5UInt8VSi_tF":{"name":"byte(fromBits:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits and returns them as a \u003ccode\u003eUInt8\u003c/code\u003e number, advancing by \u003ccode\u003efromBits\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint168fromBitss6UInt16VSi_tF":{"name":"uint16(fromBits:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits and returns them as a \u003ccode\u003eUInt16\u003c/code\u003e number, advancing by \u003ccode\u003efromBits\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint328fromBitss6UInt32VSi_tF":{"name":"uint32(fromBits:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits and returns them as a \u003ccode\u003eUInt32\u003c/code\u003e number, advancing by \u003ccode\u003efromBits\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint648fromBitss6UInt64VSi_tF":{"name":"uint64(fromBits:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits and returns them as a \u003ccode\u003eUInt64\u003c/code\u003e number, advancing by \u003ccode\u003efromBits\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC5alignyyF":{"name":"align()","abstract":"\u003cp\u003eAligns a bit pointer to a byte boundary, i.e. moves the bit pointer to the first bit of the next byte. If the","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4bytes5UInt8VyF":{"name":"byte()","abstract":"\u003cp\u003eReads a byte and returns it, advancing by one byte position.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC5bytes5countSays5UInt8VGSi_tF":{"name":"bytes(count:)","abstract":"\u003cp\u003eReads \u003ccode\u003ecount\u003c/code\u003e bytes and returns them as a \u003ccode\u003e[UInt8]\u003c/code\u003e array, advancing by \u003ccode\u003ecount\u003c/code\u003e byte positions.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint64s6UInt64VyF":{"name":"uint64()","abstract":"\u003cp\u003eReads 8 bytes and returns them as a \u003ccode\u003eUInt64\u003c/code\u003e number, advancing by 8 byte positions.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint649fromBytess6UInt64VSi_tF":{"name":"uint64(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt64\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e byte positions.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint32s6UInt32VyF":{"name":"uint32()","abstract":"\u003cp\u003eReads 4 bytes and returns them as a \u003ccode\u003eUInt32\u003c/code\u003e number, advancing by 4 byte positions.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint329fromBytess6UInt32VSi_tF":{"name":"uint32(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt32\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e byte positions.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint16s6UInt16VyF":{"name":"uint16()","abstract":"\u003cp\u003eReads 2 bytes and returns them as a \u003ccode\u003eUInt16\u003c/code\u003e number, advancing by 2 byte positions.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint169fromBytess6UInt16VSi_tF":{"name":"uint16(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt16\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e byte positions.\u003c/p\u003e","parent_name":"MsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4sizeSivp":{"name":"size","abstract":"\u003cp\u003eSize of the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e (in bytes).\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4data10Foundation0C0Vvp":{"name":"data","abstract":"\u003cp\u003eData which is being read.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6offsetSivp":{"name":"offset","abstract":"\u003cp\u003eOffset to a byte in the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e which will be read next.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC9isAlignedSbvp":{"name":"isAligned","abstract":"\u003cp\u003eTrue, if a bit pointer is aligned to a byte boundary.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC8bitsLeftSivp":{"name":"bitsLeft","abstract":"\u003cp\u003eAmount of bits left to read.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC8bitsReadSivp":{"name":"bitsRead","abstract":"\u003cp\u003eAmount of bits that were already read.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4dataAC10Foundation0C0V_tcfc":{"name":"init(data:)","abstract":"\u003cp\u003eCreates an instance for reading bits (and bytes) from the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderCyAcA0bE0_pcfc":{"name":"init(_:)","abstract":"\u003cp\u003eConverts a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html\"\u003eByteReader\u003c/a\u003e\u003c/code\u003e instance into a \u003ccode\u003eLsbBitReader\u003c/code\u003e, enabling bit reading capabilities. The current \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6offsetSivp\"\u003eoffset\u003c/a\u003e\u003c/code\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC7advance2byySi_tF":{"name":"advance(by:)","abstract":"\u003cp\u003eAdvances a bit pointer by the specified amount of bits (the default value is 1).\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC3bits5UInt8VyF":{"name":"bit()","abstract":"\u003cp\u003eReads a bit and returns it, advancing by one bit position.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4bits5countSays5UInt8VGSi_tF":{"name":"bits(count:)","abstract":"\u003cp\u003eReads \u003ccode\u003ecount\u003c/code\u003e bits and returns them as a \u003ccode\u003e[UInt8]\u003c/code\u003e array, advancing by \u003ccode\u003ecount\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC9signedInt8fromBits14representationS2i_AA26SignedNumberRepresentationOtF":{"name":"signedInt(fromBits:representation:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits, treating them as a binary \u003ccode\u003erepresenation\u003c/code\u003e of a signed integer, and returns the result as a","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4byte8fromBitss5UInt8VSi_tF":{"name":"byte(fromBits:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits and returns them as a \u003ccode\u003eUInt8\u003c/code\u003e number, advancing by \u003ccode\u003efromBits\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint168fromBitss6UInt16VSi_tF":{"name":"uint16(fromBits:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits and returns them as a \u003ccode\u003eUInt16\u003c/code\u003e number, advancing by \u003ccode\u003efromBits\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint328fromBitss6UInt32VSi_tF":{"name":"uint32(fromBits:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits and returns them as a \u003ccode\u003eUInt32\u003c/code\u003e number, advancing by \u003ccode\u003efromBits\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint648fromBitss6UInt64VSi_tF":{"name":"uint64(fromBits:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits and returns them as a \u003ccode\u003eUInt64\u003c/code\u003e number, advancing by \u003ccode\u003efromBits\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC5alignyyF":{"name":"align()","abstract":"\u003cp\u003eAligns a bit pointer to a byte boundary, i.e. moves the bit pointer to the first bit of the next byte. If the","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4bytes5UInt8VyF":{"name":"byte()","abstract":"\u003cp\u003eReads a byte and returns it, advancing by one byte position.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC5bytes5countSays5UInt8VGSi_tF":{"name":"bytes(count:)","abstract":"\u003cp\u003eReads \u003ccode\u003ecount\u003c/code\u003e bytes and returns them as a \u003ccode\u003e[UInt8]\u003c/code\u003e array, advancing by \u003ccode\u003ecount\u003c/code\u003e byte positions.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint64s6UInt64VyF":{"name":"uint64()","abstract":"\u003cp\u003eReads 8 bytes and returns them as a \u003ccode\u003eUInt64\u003c/code\u003e number, advancing by 8 byte positions.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint649fromBytess6UInt64VSi_tF":{"name":"uint64(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt64\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e byte positions.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint32s6UInt32VyF":{"name":"uint32()","abstract":"\u003cp\u003eReads 4 bytes and returns them as a \u003ccode\u003eUInt32\u003c/code\u003e number, advancing by 4 byte positions.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint329fromBytess6UInt32VSi_tF":{"name":"uint32(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt32\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e byte positions.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint16s6UInt16VyF":{"name":"uint16()","abstract":"\u003cp\u003eReads 2 bytes and returns them as a \u003ccode\u003eUInt16\u003c/code\u003e number, advancing by 2 byte positions.\u003c/p\u003e","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint169fromBytess6UInt16VSi_tF":{"name":"uint16(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt16\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e byte positions.\u003c/p\u003e","parent_name":"LsbBitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP9isAlignedSbvp":{"name":"isAligned","abstract":"\u003cp\u003eTrue, if a bit pointer is aligned to a byte boundary.\u003c/p\u003e","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP8bitsLeftSivp":{"name":"bitsLeft","abstract":"\u003cp\u003eAmount of bits left to read.\u003c/p\u003e","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP8bitsReadSivp":{"name":"bitsRead","abstract":"\u003cp\u003eAmount of bits that were already read.\u003c/p\u003e","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderPyxAA0bD0_pcfc":{"name":"init(_:)","abstract":"\u003cp\u003eConverts a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html\"\u003eByteReader\u003c/a\u003e\u003c/code\u003e instance into a \u003ccode\u003eBitReader\u003c/code\u003e, enabling bits reading capabilities. The current \u003ccode\u003eoffset\u003c/code\u003e value","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP7advance2byySi_tF":{"name":"advance(by:)","abstract":"\u003cp\u003eAdvances a bit pointer by the amount of bits.\u003c/p\u003e","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP3bits5UInt8VyF":{"name":"bit()","abstract":"\u003cp\u003eReads a bit and returns it, advancing by one bit position.\u003c/p\u003e","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP4bits5countSays5UInt8VGSi_tF":{"name":"bits(count:)","abstract":"\u003cp\u003eReads \u003ccode\u003ecount\u003c/code\u003e bits and returns them as a \u003ccode\u003e[UInt8]\u003c/code\u003e array, advancing by \u003ccode\u003ecount\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP3int8fromBitsS2i_tF":{"name":"int(fromBits:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits and returns them as a \u003ccode\u003eInt\u003c/code\u003e number, advancing by \u003ccode\u003efromBits\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP9signedInt8fromBits14representationS2i_AA26SignedNumberRepresentationOtF":{"name":"signedInt(fromBits:representation:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits, treating them as a binary \u003ccode\u003erepresenation\u003c/code\u003e of a signed integer, and returns the result as a","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP4byte8fromBitss5UInt8VSi_tF":{"name":"byte(fromBits:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits and returns them as a \u003ccode\u003eUInt8\u003c/code\u003e number, advancing by \u003ccode\u003efromBits\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP6uint168fromBitss6UInt16VSi_tF":{"name":"uint16(fromBits:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits and returns them as a \u003ccode\u003eUInt16\u003c/code\u003e number, advancing by \u003ccode\u003efromBits\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP6uint328fromBitss6UInt32VSi_tF":{"name":"uint32(fromBits:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits and returns them as a \u003ccode\u003eUInt32\u003c/code\u003e number, advancing by \u003ccode\u003efromBits\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP6uint648fromBitss6UInt64VSi_tF":{"name":"uint64(fromBits:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBits\u003c/code\u003e bits and returns them as a \u003ccode\u003eUInt64\u003c/code\u003e number, advancing by \u003ccode\u003efromBits\u003c/code\u003e bit positions.\u003c/p\u003e","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP5alignyyF":{"name":"align()","abstract":"\u003cp\u003eAligns a bit pointer to a byte boundary, i.e. moves the bit pointer to the first bit of the next byte.\u003c/p\u003e","parent_name":"BitReader"},"Protocols/BitReader.html":{"name":"BitReader","abstract":"\u003cp\u003eA type that contains functions for reading \u003ccode\u003eData\u003c/code\u003e bit-by-bit and byte-by-byte.\u003c/p\u003e"},"Classes/LsbBitReader.html":{"name":"LsbBitReader","abstract":"\u003cp\u003eA type that contains functions for reading \u003ccode\u003eData\u003c/code\u003e bit-by-bit using \u0026ldquo;LSB0\u0026rdquo; bit numbering scheme and byte-by-byte in the"},"Classes/MsbBitReader.html":{"name":"MsbBitReader","abstract":"\u003cp\u003eA type that contains functions for reading \u003ccode\u003eData\u003c/code\u003e bit-by-bit using \u0026ldquo;MSB0\u0026rdquo; bit numbering scheme and byte-by-byte in the"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4sizeSivp":{"name":"size","abstract":"\u003cp\u003eSize of the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e (in bytes).\u003c/p\u003e","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4data10Foundation0C0Vvp":{"name":"data","abstract":"\u003cp\u003eData which is being read.\u003c/p\u003e","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6offsetSivp":{"name":"offset","abstract":"\u003cp\u003eOffset to a byte in the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e which will be read next.\u003c/p\u003e","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4dataAC10Foundation0C0V_tcfc":{"name":"init(data:)","abstract":"\u003cp\u003eCreates an instance for reading bytes from the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e.\u003c/p\u003e","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4bytes5UInt8VyF":{"name":"byte()","abstract":"\u003cp\u003eReads a byte and returns it, advancing by one position.\u003c/p\u003e","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC5bytes5countSays5UInt8VGSi_tF":{"name":"bytes(count:)","abstract":"\u003cp\u003eReads \u003ccode\u003ecount\u003c/code\u003e bytes and returns them as a \u003ccode\u003e[UInt8]\u003c/code\u003e array, advancing by \u003ccode\u003ecount\u003c/code\u003e positions.\u003c/p\u003e","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6uint64s6UInt64VyF":{"name":"uint64()","abstract":"\u003cp\u003eReads 8 bytes and returns them as a \u003ccode\u003eUInt64\u003c/code\u003e number, advancing by 8 positions.\u003c/p\u003e","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6uint649fromBytess6UInt64VSi_tF":{"name":"uint64(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt64\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e positions.\u003c/p\u003e","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6uint32s6UInt32VyF":{"name":"uint32()","abstract":"\u003cp\u003eReads 4 bytes and returns them as a \u003ccode\u003eUInt32\u003c/code\u003e number, advancing by 4 positions.\u003c/p\u003e","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6uint329fromBytess6UInt32VSi_tF":{"name":"uint32(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt32\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e positions.\u003c/p\u003e","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6uint16s6UInt16VyF":{"name":"uint16()","abstract":"\u003cp\u003eReads 2 bytes and returns them as a \u003ccode\u003eUInt16\u003c/code\u003e number, advancing by 2 positions.\u003c/p\u003e","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6uint169fromBytess6UInt16VSi_tF":{"name":"uint16(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt16\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e positions.\u003c/p\u003e","parent_name":"BigEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4sizeSivp":{"name":"size","abstract":"\u003cp\u003eSize of the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e (in bytes).\u003c/p\u003e","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4data10Foundation0C0Vvp":{"name":"data","abstract":"\u003cp\u003eData which is being read.\u003c/p\u003e","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6offsetSivp":{"name":"offset","abstract":"\u003cp\u003eOffset to a byte in the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e which will be read next.\u003c/p\u003e","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4dataAC10Foundation0C0V_tcfc":{"name":"init(data:)","abstract":"\u003cp\u003eCreates an instance for reading bytes from the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e.\u003c/p\u003e","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4bytes5UInt8VyF":{"name":"byte()","abstract":"\u003cp\u003eReads a byte and returns it, advancing by one position.\u003c/p\u003e","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC5bytes5countSays5UInt8VGSi_tF":{"name":"bytes(count:)","abstract":"\u003cp\u003eReads \u003ccode\u003ecount\u003c/code\u003e bytes and returns them as a \u003ccode\u003e[UInt8]\u003c/code\u003e array, advancing by \u003ccode\u003ecount\u003c/code\u003e positions.\u003c/p\u003e","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6uint64s6UInt64VyF":{"name":"uint64()","abstract":"\u003cp\u003eReads 8 bytes and returns them as a \u003ccode\u003eUInt64\u003c/code\u003e number, advancing by 8 positions.\u003c/p\u003e","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6uint649fromBytess6UInt64VSi_tF":{"name":"uint64(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt64\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e positions.\u003c/p\u003e","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6uint32s6UInt32VyF":{"name":"uint32()","abstract":"\u003cp\u003eReads 4 bytes and returns them as a \u003ccode\u003eUInt32\u003c/code\u003e number, advancing by 4 positions.\u003c/p\u003e","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6uint329fromBytess6UInt32VSi_tF":{"name":"uint32(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt32\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e positions.\u003c/p\u003e","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6uint16s6UInt16VyF":{"name":"uint16()","abstract":"\u003cp\u003eReads 2 bytes and returns them as a \u003ccode\u003eUInt16\u003c/code\u003e number, advancing by 2 positions.\u003c/p\u003e","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6uint169fromBytess6UInt16VSi_tF":{"name":"uint16(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt16\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e positions.\u003c/p\u003e","parent_name":"LittleEndianByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP4sizeSivp":{"name":"size","abstract":"\u003cp\u003eSize of the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e (in bytes).\u003c/p\u003e","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP4data10Foundation0C0Vvp":{"name":"data","abstract":"\u003cp\u003eData which is being read.\u003c/p\u003e","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP6offsetSivp":{"name":"offset","abstract":"\u003cp\u003eOffset to a byte in the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e which will be read next.\u003c/p\u003e","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP4datax10Foundation0C0V_tcfc":{"name":"init(data:)","abstract":"\u003cp\u003eCreates an instance for reading bytes from the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e.\u003c/p\u003e","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP4bytes5UInt8VyF":{"name":"byte()","abstract":"\u003cp\u003eReads a byte and returns it, advancing by one position.\u003c/p\u003e","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP5bytes5countSays5UInt8VGSi_tF":{"name":"bytes(count:)","abstract":"\u003cp\u003eReads \u003ccode\u003ecount\u003c/code\u003e bytes and returns them as a \u003ccode\u003e[UInt8]\u003c/code\u003e array, advancing by \u003ccode\u003ecount\u003c/code\u003e positions.\u003c/p\u003e","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP3int9fromBytesS2i_tF":{"name":"int(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eInt\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e positions.\u003c/p\u003e","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP6uint649fromBytess6UInt64VSi_tF":{"name":"uint64(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt64\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e positions.\u003c/p\u003e","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP6uint329fromBytess6UInt32VSi_tF":{"name":"uint32(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt32\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e positions.\u003c/p\u003e","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP6uint169fromBytess6UInt16VSi_tF":{"name":"uint16(fromBytes:)","abstract":"\u003cp\u003eReads \u003ccode\u003efromBytes\u003c/code\u003e bytes and returns them as a \u003ccode\u003eUInt16\u003c/code\u003e number, advancing by \u003ccode\u003efromBytes\u003c/code\u003e positions.\u003c/p\u003e","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderPAAEyxAA0aD0_pcfc":{"name":"init(_:)","abstract":"\u003cp\u003eCreates an instance for reading bytes by using the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e and the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP6offsetSivp\"\u003eoffset\u003c/a\u003e\u003c/code\u003e of the specified \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/BitReader.html\"\u003eBitReader\u003c/a\u003e\u003c/code\u003e.\u003c/p\u003e","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderPAAE9bytesLeftSivp":{"name":"bytesLeft","abstract":"\u003cp\u003eAmount of bytes left to read.\u003c/p\u003e","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderPAAE9bytesReadSivp":{"name":"bytesRead","abstract":"\u003cp\u003eAmount of bytes that were already read.\u003c/p\u003e","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderPAAE10isFinishedSbvp":{"name":"isFinished","abstract":"\u003cp\u003eTrue, if the \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP6offsetSivp\"\u003eoffset\u003c/a\u003e\u003c/code\u003e points at any position after the last byte in \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP4data10Foundation0C0Vvp\"\u003edata\u003c/a\u003e\u003c/code\u003e, which generally means that all data","parent_name":"ByteReader"},"Protocols/ByteReader.html":{"name":"ByteReader","abstract":"\u003cp\u003eA type that contains functions for reading \u003ccode\u003eData\u003c/code\u003e byte-by-byte.\u003c/p\u003e"},"Classes/LittleEndianByteReader.html":{"name":"LittleEndianByteReader","abstract":"\u003cp\u003eA type that contains functions for reading \u003ccode\u003eData\u003c/code\u003e byte-by-byte in the Little Endian order.\u003c/p\u003e"},"Classes/BigEndianByteReader.html":{"name":"BigEndianByteReader","abstract":"\u003cp\u003eA type that contains functions for reading \u003ccode\u003eData\u003c/code\u003e byte-by-byte in the Big Endian order.\u003c/p\u003e"},"Reading%20bytes.html":{"name":"Reading bytes"},"Reading%20bits%20%28and%20bytes%29.html":{"name":"Reading bits (and bytes)"},"Writing%20bits%20%28and%20bytes%29.html":{"name":"Writing bits (and bytes)"},"Other%20Enums.html":{"name":"Other Enumerations","abstract":"\u003cp\u003eThe following enumerations are available globally.\u003c/p\u003e"}}